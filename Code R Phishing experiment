---
title: "Recherche"
author: "Beaufils - Cochet - Dyèvre"
date: "`r Sys.Date()`"
output:
  html_document:
    toc: yes
    toc_float:
      collapsed: no
      smooth_scroll: yes
      number_sections: yes
    theme: readable
    df_print: kable
    code_folding: hide
  html_notebook:
    toc: yes
---

<style>
body {
text-align: justify}
</style>

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
library(tidyverse)
library(cowplot)
library(gtsummary)
library(knitr) # pour créer des tables
library(kableExtra)
```

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
data_phishing <- read.csv("/Users/f-x/Downloads/phishing_dataset.csv") %>%
  # recodage de la variable de traitement
  mutate(group = case_when(
    group == 1 ~ "Control",
    group == 2 ~ "Info",
    group == 3 ~ "Exp",
    group == 4 ~ "ExpInfo"
  )) %>%
  
  mutate(group = fct_relevel(group, "Control", "Info", "Exp", "ExpInfo")) %>%
  # recodage de la variable âge
  mutate(
    age_categories = case_when(
      age <= 25 ~ "16-25",
      age >= 26 & age <= 35 ~ "26-35",
      age >= 36 & age <= 45 ~ "36-45",
      age >= 46 & age <= 55 ~ "46-55",
      age > 55 ~ ">55"
    )
  ) %>%
  mutate(age_categories = fct_relevel(age_categories, "16-25", "26-35", "36-45", "46-55")) %>%
  #recodage de la variable genre 
  mutate(gender = case_when(gender == "M" ~ 1,
                            gender == "F" ~ 0)) %>%
  # changement ordre variable division avec b pour référence
  mutate(division = fct_relevel(division, "B", "A", "C", "D", "E")) 

data_phis_c <- data_phishing %>%
  filter(division == 'A' | division == 'B' | division == 'D' | division == 'E')

Outcome = c('Visit', 'Fill', 'Visit_Fill')
Group = c('Control','Info','Exp','ExpInf')
```

Caractéristiques des unités et tests de ressemblance

- Nombre total d'unités par groupe

"We implemented two interventions: information provision (Info) and experience (Exp).
We used a 2x2 design and subjects were divided into four groups of roughly equal size: Control
(2723 employees), Info (2740), Exp (2724) and ExpInfo (2742)."

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
data_phishing %>%
  group_by(group) %>%
  summarise(nb_group = n())
```

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
data_phis_c %>%
  group_by(group) %>%
  summarise(nb_group = n())
```

- Nombre d'unités féminines et masculines

"Most subjects were males (60,6%), [...]."

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
data_phishing %>%
  group_by(gender) %>%
  summarise(nb_obs = n())
```

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
data_phis_c %>%
  group_by(gender) %>%
  summarise(nb_obs = n())
```
```{r, eval = TRUE, message = FALSE, warning =  FALSE}

rep_sex = mean(data_phishing$gender, na.rm = TRUE)*100
rep_sex_c = mean(data_phis_c$gender, na.rm = TRUE)*100

rep_sex
rep_sex_c
```

- Age des unités

* Moyenne globale

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
moy_age = mean(data_phishing$age, na.rm = TRUE)
moy_age_c = mean(data_phis_c$age, na.rm = TRUE)

moy_age
moy_age_c
```

* Age des unités en fonction du traitement

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
ggplot(data = data_phishing) +
  geom_boxplot(aes(x = as.character(group), y = age , color = as.character(group)))
```

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
ggplot(data = data_phishing) +
  geom_density(aes(x = age, color = group))
```


```{r, eval = TRUE, message = FALSE, warning =  FALSE}
ggplot(data = data_phis_c) +
  geom_boxplot(aes(x = as.character(group), y = age , color = as.character(group)))
```

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
ggplot(data = data_phis_c) +
  geom_density(aes(x = age, color = group)) 
```

- Tableau récapitulatif des caractéristiques des unités en focntion du traitement


```{r, eval = TRUE, message = FALSE, warning =  FALSE}
data_phishing %>%
  group_by(group) %>%
  summarise(nb_obs = n(), mean_age = mean(age, na.rm = TRUE), sex_repartition = mean(gender, na.rm = TRUE)*100, mean_int_employee = mean(int_employee, na.rm = TRUE)*100,)
```

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
data_phis_c %>%
  group_by(group) %>%
  summarise(nb_obs = n(), mean_age = mean(age, na.rm = TRUE), sex_repartition = mean(gender, na.rm = TRUE)*100, mean_int_employee = mean(int_employee, na.rm = TRUE)*100,)
```


#Randomization inference


We decided to focus our randomization inference by removing the C division from the analysis. Indeed, given the difficulties encountered by the researchers with this unit, it seemed to us biased to take it into account in this analysis.

We have divided this analysis by looking at each treatment individually. In this way, we can first determine which of the treatments definitely reduce the likelihood of falling victim to a phishing attack.


I. Calculation of ATEs for each treatment

A. Exp

```{r, eval = TRUE, message = FALSE, warning =  FALSE}


observed_difference_v = mean(data_phis_c$visit[data_phis_c$group == 'Exp']) - mean(data_phis_c$visit[data_phis_c$group == 'Control']) 
observed_difference_f = mean(data_phis_c$fill[data_phis_c$group == 'Exp']) - mean(data_phis_c$fill[data_phis_c$group == 'Control']) 
observed_difference_vf = mean(data_phis_c$visit_fill[data_phis_c$group == 'Exp'], na.rm = TRUE) - mean(data_phis_c$visit_fill[data_phis_c$group == 'Control'], na.rm = TRUE) 


print(data.frame(Outcome = c('Visit', 'Fill', 'Visit_Fill'), ATE = c(observed_difference_v,observed_difference_f, observed_difference_vf)))  
```

The observed differences seem to establish a negative correlation between the 'Exp' treatment and the control group: this treatment reduced the different outcomes by 11 to 13 percentage points. For instance, the number of units which visited the website has been reduced by 13 percentage points, compared to the control group.  Let's see if this difference stands up to randomisation inference.


B. Info

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
observed_difference_v_info = mean(data_phis_c$visit[data_phis_c$group == 'Info']) - mean(data_phis_c$visit[data_phis_c$group == 'Control']) 
observed_difference_f_info = mean(data_phis_c$fill[data_phis_c$group == 'Info']) - mean(data_phis_c$fill[data_phis_c$group == 'Control'])
print(observed_difference_f_info)
observed_difference_vf_info = mean(data_phis_c$visit_fill[data_phis_c$group == 'Info'], na.rm = TRUE) - mean(data_phis_c$visit_fill[data_phis_c$group == 'Control'], na.rm = TRUE) 

  
print(data.frame(Outcome = c('Visit', 'Fill', 'Visit_Fill'), ATE = c(observed_difference_v_info,observed_difference_f_info, observed_difference_vf_info)))  
```

The observed differences seem to establish a negative correlation between the 'Info' treatment and the control group: this treatment reduced the different outcomes by 11 to 13 percentage points. For instance, the number of units which visited the website has been reduced by 8 percentage points, compared to the control group.  Let's see if this difference stands up to randomisation inference.


C. ExpInfo

```{r, eval = TRUE, message = FALSE, warning =  FALSE}

observed_difference_v_expinfo = mean(data_phis_c$visit[data_phis_c$group == 'ExpInfo']) - mean(data_phis_c$visit[data_phis_c$group == 'Control']) 
observed_difference_f_expinfo = mean(data_phis_c$fill[data_phis_c$group == 'ExpInfo']) - mean(data_phis_c$fill[data_phis_c$group == 'Control']) 
print(observed_difference_f_expinfo)
observed_difference_vf_expinfo = mean(data_phis_c$visit_fill[data_phis_c$group == 'ExpInfo'], na.rm = TRUE) - mean(data_phis_c$visit_fill[data_phis_c$group == 'Control'], na.rm = TRUE) 
print(observed_difference_vf_expinfo)

print(data.frame(Outcome = c('Visit', 'Fill', 'Visit_Fill'), ATE = c(observed_difference_v_expinfo,observed_difference_f_expinfo, observed_difference_vf_expinfo))) 

```

The observed differences seem to establish a negative correlation between the 'ExpInfo' treatment and the control group: this treatment reduced the different outcomes by 9 to 15 percentage points. For instance, the number of units which visited the website has been reduced by 10 percentage points, compared to the control group.  Let's see if this difference stands up to randomisation inference.


II. Calculation of the proportions of treated units

Here we calculate the proportions of treated units for each treatment compared to the numbers of control units. These proportions are necessary for randomization inference in a cluster experiment like ours.

A. Exp

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
data_phis_c_exp <- data_phis_c %>%
  filter(group == 'Control' | group == 'Exp') %>%
  mutate(ind_group = ifelse(group == 'Exp',1,0))
                              

prop_exp = sum(data_phis_c_exp$ind_group)/nrow(data_phis_c_exp)
```

B. Info

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
data_phis_c_info <- data_phis_c %>%
  filter(group == 'Control' | group == 'Info') %>%
  mutate(ind_group = ifelse(group == 'Info',1,0))
                            

prop_info = sum(data_phis_c_info$ind_group)/nrow(data_phis_c_info)
```

C. ExpInfo

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
data_phis_c_expinfo <- data_phis_c %>%
  filter(group == 'Control' | group == 'ExpInfo') %>%
  mutate(ind_group = ifelse(group == 'ExpInfo',1,0))
                            

prop_expinfo = sum(data_phis_c_expinfo$ind_group)/nrow(data_phis_c_expinfo)
```


III. Randomization inference loop


As explained, our experiment is based on cluster allocation. Thus, it is necessary to randomise on the clusters and not on the units themselves. As each cluster consists of one and the same treatment, we randomised according to the proportion of treated to control group. 

A. Exp


```{r, eval = TRUE, message = FALSE, warning =  FALSE}
diff_simulations <- rep(NA, 1000)
diff_simulations_f_exp <- rep(NA, 1000)
diff_simulations_vf_exp <- rep(NA, 1000)


#loop for simulations
for (i in 1:1000){

data_phis_c_exp <- data_phis_c_exp %>%
#We construct a new treat variable (with mutate function) which randomly mixes (sample function) the elements of the treat variable  
  group_by(cluster) %>%
  mutate(new_group = rbinom(1, 1, prop_exp)) %>%
  mutate(new_group = case_when(new_group == 1 ~ 'Exp',
                               new_group == 0 ~ 'Control'))

#We calculate the differences for each of the 1000 distributions that I place at the i-th coordinate
diff_simulations[i] <- mean(data_phis_c_exp$visit[data_phis_c_exp$new_group == "Exp"]) - mean(data_phis_c_exp$visit[data_phis_c_exp$new_group=="Control"])

diff_simulations_f_exp[i] <- mean(data_phis_c_exp$fill[data_phis_c_exp$new_group == "Exp"]) - mean(data_phis_c_exp$fill[data_phis_c_exp$new_group=="Control"])

diff_simulations_vf_exp[i] <- mean(data_phis_c_exp$visit_fill[data_phis_c_exp$new_group == "Exp"], na.rm = TRUE) - mean(data_phis_c_exp$visit_fill[data_phis_c_exp$new_group=="Control"], na.rm = TRUE)
}

```



```{r, eval = TRUE}

data_simulations <- tibble(diff_simulations=diff_simulations)
graph_exp <- ggplot(data_simulations, aes(x = diff_simulations)) +
  geom_density(color = 'black', fill = 'deepskyblue3', alpha = 0.5) +
  #The average of the random differences in black
  geom_vline(xintercept = mean(data_simulations$diff_simulations), color = 'black') +
  #The actual average observed in coral
  geom_vline(xintercept = observed_difference_v, color = 'coral') +
  xlab("Visit") +
  theme_minimal()

data_simulations_f_exp <- tibble(diff_simulations_f_exp=diff_simulations_f_exp)
graph_fill_exp <- ggplot(data_simulations_f_exp, aes(x = diff_simulations_f_exp)) +
  geom_density(color = 'black', fill = 'deepskyblue3', alpha = 0.5) +
  geom_vline(xintercept = mean(data_simulations_f_exp$diff_simulations_f_exp), color = 'black') +
  geom_vline(xintercept = observed_difference_f, color = 'coral') +
  xlab("Fill") +
  theme_minimal()

data_simulations_vf_exp <- tibble(diff_simulations_vf_exp=diff_simulations_vf_exp)
graph_visitfill_exp <- ggplot(data_simulations_vf_exp, aes(x = diff_simulations_vf_exp)) +
  geom_density(color = 'black', fill = 'deepskyblue3', alpha = 0.5) +
  geom_vline(xintercept = mean(data_simulations_vf_exp$diff_simulations_vf_exp), color = 'black') +
  geom_vline(xintercept = observed_difference_vf, color = 'coral') +
  xlab("Visit_Fill") +
  theme_minimal()


print(plot_grid(graph_exp,graph_fill_exp,graph_visitfill_exp))
```

P-values

```{r, eval = TRUE, message = FALSE, warning =  FALSE}

opve = (sum(data_simulations$diff_simulations <= observed_difference_v)/1000)*100
tpve = (sum(abs(data_simulations$diff_simulations) >=  abs(observed_difference_v))/1000)*100

opfe = (sum(data_simulations_f_exp$diff_simulations_f_exp <= observed_difference_f)/1000)*100
tpfe = (sum(abs(data_simulations_f_exp$diff_simulations_f_exp) >=  abs(observed_difference_f))/1000)*100

opvfe = (sum(data_simulations_vf_exp$diff_simulations_vf_exp <= observed_difference_vf)/1000)*100
tpvfe = (sum(abs(data_simulations_vf_exp$diff_simulations_vf_exp) >=  abs(observed_difference_vf))/1000)*100

data.frame(outcome = c('Visit','Fill','Visit_Fill'), one_sided_p_values = c(opve, opfe, opvfe), two_sided_p_values = c(tpve ,tpfe ,tpvfe))

```
As the p-values are relatively low, it seems consistent to reject the sharp null hypothesis for this treatment.


B. Info


```{r, eval = TRUE, message = FALSE, warning =  FALSE}
diff_simulations_info <- rep(NA, 1000)
diff_simulations_f_info <- rep(NA, 1000)
diff_simulations_vf_info <- rep(NA, 1000)
for (i in 1:1000){

data_phis_c_info <- data_phis_c_info %>%
  group_by(cluster) %>%
  mutate(new_group = rbinom(1, 1, prop_info)) %>%
  mutate(new_group = case_when(new_group == 1 ~ 'Info',
                               new_group == 0 ~ 'Control'))

diff_simulations_info[i] <- mean(data_phis_c_info$visit[data_phis_c_info$new_group == "Info"]) - mean(data_phis_c_info$visit[data_phis_c_info$new_group=="Control"])

diff_simulations_f_info[i] <- mean(data_phis_c_info$fill[data_phis_c_info$new_group == "Info"]) - mean(data_phis_c_info$fill[data_phis_c_info$new_group=="Control"])

diff_simulations_vf_info[i] <- mean(data_phis_c_info$visit_fill[data_phis_c_info$new_group == "Info"], na.rm = TRUE) - mean(data_phis_c_info$visit_fill[data_phis_c_info$new_group=="Control"], na.rm = TRUE)
}

```

```{r, eval = TRUE}
data_simulations_info <- tibble(diff_simulations_info=diff_simulations_info)
graph_info <- ggplot(data_simulations_info, aes(x = diff_simulations_info)) +
  geom_density(color = 'black', fill = 'deepskyblue3', alpha = 0.5) +
  geom_vline(xintercept = mean(data_simulations_info$diff_simulations_info), color = 'black') +
  geom_vline(xintercept = observed_difference_v_info, color = 'coral') +
  xlab("Visit") +
  theme_minimal()

data_simulations_f_info <- tibble(diff_simulations_f_info=diff_simulations_f_info)
graph_fill_info <- ggplot(data_simulations_f_info, aes(x = diff_simulations_f_info)) +
  geom_density(color = 'black', fill = 'deepskyblue3', alpha = 0.5) +
  geom_vline(xintercept = mean(data_simulations_f_info$diff_simulations_f_info), color = 'black') +
  geom_vline(xintercept = observed_difference_f_info, color = 'coral') +
  xlab("Fill") +
  theme_minimal()

data_simulations_vf_info <- tibble(diff_simulations_vf_info=diff_simulations_vf_info)
graph_visitfill_info <- ggplot(data_simulations_vf_info, aes(x = diff_simulations_vf_info)) +
  geom_density(color = 'black', fill = 'deepskyblue3', alpha = 0.5) +
  geom_vline(xintercept = mean(data_simulations_vf_info$diff_simulations_vf_info), color = 'black') +
  geom_vline(xintercept = observed_difference_vf_info, color = 'coral') +
  xlab("Visit_Fill") +
  theme_minimal()

plot_grid(graph_info,graph_fill_info,graph_visitfill_info)
```

P-values

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
#Calcul de la one-sided et two-sided p-value

opvi = (sum(data_simulations_info$diff_simulations_info <= observed_difference_v_info)/1000)*100
tpvi = (sum(abs(data_simulations_info$diff_simulations_info) >=  abs(observed_difference_v_info))/1000)*100

opfi = (sum(data_simulations_f_info$diff_simulations_f_info <= observed_difference_f_info)/1000)*100
tpfi = (sum(abs(data_simulations_f_info$diff_simulations_f_info) >=  abs(observed_difference_f_info))/1000)*100

opvfi = (sum(data_simulations_vf_info$diff_simulations_vf_info <= observed_difference_vf_info)/1000)*100
tpvfi = (sum(abs(data_simulations_vf_info$diff_simulations_vf_info) >=  abs(observed_difference_vf_info))/1000)*100

data.frame(Outcome, one_sided_p_values = c(opvi, opfi, opvfi), two_sided_p_values = c(tpvi ,tpfi ,tpvfi))

```

As we see from the graph and table above, it is more difficult here to reject the sharp null hypothesis for this treatment and particularly for the 'Visit' outcome. Indeed, about 10% of the values are more extreme than that observed for this outcome. Nevertheless, the general trend seems to be in the direction of the effectiveness of the treatment.


C. ExpInfo

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
diff_simulations_expinfo <- rep(NA, 1000)
diff_simulations_f_expinfo <- rep(NA, 1000)
diff_simulations_vf_expinfo <- rep(NA, 1000)

for (i in 1:1000){

data_phis_c_expinfo <- data_phis_c_expinfo %>%
  group_by(cluster) %>%
  mutate(new_group = rbinom(1,1,prop_expinfo)) %>%
  mutate(new_group = case_when(new_group == 1 ~ 'ExpInfo',
                               new_group == 0 ~ 'Control'))

diff_simulations_expinfo[i] <- mean(data_phis_c_expinfo$visit[data_phis_c_expinfo$new_group == "ExpInfo"]) - mean(data_phis_c_expinfo$visit[data_phis_c_expinfo$new_group=="Control"])

diff_simulations_f_expinfo[i] <- mean(data_phis_c_expinfo$fill[data_phis_c_expinfo$new_group == "ExpInfo"]) - mean(data_phis_c_expinfo$fill[data_phis_c_expinfo$new_group=="Control"])

diff_simulations_vf_expinfo[i] <- mean(data_phis_c_expinfo$visit_fill[data_phis_c_expinfo$new_group == "ExpInfo"], na.rm = TRUE) - mean(data_phis_c_expinfo$visit_fill[data_phis_c_expinfo$new_group=="Control"], na.rm = TRUE)
}
```


```{r, eval = TRUE}

data_simulations_expinfo <- tibble(diff_simulations_expinfo=diff_simulations_expinfo)
graph_expinfo <- ggplot(data_simulations_expinfo, aes(x = diff_simulations_expinfo)) +
  geom_density(color = 'black', fill = 'deepskyblue3', alpha = 0.5) +
  geom_vline(xintercept = mean(data_simulations_expinfo$diff_simulations_expinfo), color = 'black') +
  geom_vline(xintercept = observed_difference_v_expinfo, color = 'coral') +
  xlab("Visit") + 
  theme_minimal()

data_simulations_f_expinfo <- tibble(diff_simulations_f_expinfo=diff_simulations_f_expinfo)
graph_fill_expinfo <- ggplot(data_simulations_f_expinfo, aes(x = diff_simulations_f_expinfo)) +
  geom_density(color = 'black', fill = 'deepskyblue3', alpha = 0.5) +
  geom_vline(xintercept = mean(data_simulations_f_expinfo$diff_simulations_f_expinfo), color = 'black') +
  geom_vline(xintercept = observed_difference_f_expinfo, color = 'coral') +
  xlab("Fill") +
  theme_minimal()

data_simulations_vf_expinfo <- tibble(diff_simulations_vf_expinfo=diff_simulations_vf_expinfo)
graph_visitfill_expinfo <- ggplot(data_simulations_vf_expinfo, aes(x = diff_simulations_vf_expinfo)) +
  geom_density(color = 'black', fill = 'deepskyblue3', alpha = 0.5) +
  geom_vline(xintercept = mean(data_simulations_vf_expinfo$diff_simulations_vf_expinfo), color = 'black') +
  geom_vline(xintercept = observed_difference_vf_expinfo, color = 'coral') +
  xlab("Visit_Fill") +
  theme_minimal()


plot_grid(graph_expinfo,graph_fill_expinfo,graph_visitfill_expinfo)
```

P-values 

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
#Calcul de la one-sided et two-sided p-value

opvei = (sum(data_simulations_expinfo$diff_simulations_expinfo <= observed_difference_v_expinfo)/1000)*100
tpvei = (sum(abs(data_simulations_expinfo$diff_simulations_expinfo) >=  abs(observed_difference_v_expinfo))/1000)*100

opfei = (sum(data_simulations_f_expinfo$diff_simulations_f_expinfo <= observed_difference_f_expinfo)/1000)*100
tpfei = (sum(abs(data_simulations_f_expinfo$diff_simulations_f_expinfo) >=  abs(observed_difference_f_expinfo))/1000)*100

opvfei = (sum(data_simulations_vf_expinfo$diff_simulations_vf_expinfo <= observed_difference_vf_expinfo)/1000)*100
tpvfei = (sum(abs(data_simulations_vf_expinfo$diff_simulations_vf_expinfo) >=  abs(observed_difference_vf_expinfo))/1000)*100

data.frame(Outcome, one_sided_p_values = c(opvei, opfei, opvfei), two_sided_p_values = c(tpvei ,tpfei 
```

As the p-values are relatively low, it seems consistent to reject the sharp null hypothesis for this treatment.



IV. Résultat final

```{r, echo = TRUE, message = FALSE, warning = FALSE, fig.width = 10, fig.height = 5, fig.fullwidth=TRUE}
first_row <- plot_grid(graph_exp, graph_fill_exp, graph_visitfill_exp, labels = 'Exp', ncol = 3)
second <- plot_grid(graph_info, graph_fill_info, graph_visitfill_info, labels = 'Info', ncol = 3)
third <- plot_grid(graph_expinfo, graph_fill_expinfo, graph_visitfill_expinfo, labels = 'ExpInfo', ncol = 3)

plot_grid(first_row, second, third,  nrow = 3)
```



Weighted t-test


```{r, eval = TRUE, message = FALSE, warning =  FALSE}
#création des tables contenant les proportions des outcomes par cluster
data_wtt <- data_phishing %>%
  group_by(group, cluster) %>%
  summarise(prop_cluster = n()/10929, prop_fill = sum(fill)/n(), prop_visit = sum(visit)/n(),  prop_visit_fill = sum(visit_fill, na.rm = TRUE)/sum(visit))

data_wtt_c <- data_phis_c %>%
  group_by(group, cluster) %>%
  summarise(prop_cluster = n()/10929, prop_fill = sum(fill)/n(), prop_visit = sum(visit)/n(),  prop_visit_fill = sum(visit_fill, na.rm = TRUE)/sum(visit))


```

Groupe de Controle

```{r, eval = TRUE, message = FALSE, warning =  FALSE}

fc = weighted.mean(x = data_wtt$prop_fill[data_wtt$group == 'Control'], w = data_wtt$prop_cluster[data_wtt$group == 'Control'])

vc = weighted.mean(x = data_wtt$prop_visit[data_wtt$group == 'Control'], w = data_wtt$prop_cluster[data_wtt$group == 'Control'])

vfc = weighted.mean(x = data_wtt$prop_visit_fill[data_wtt$group == 'Control'], w = data_wtt$prop_cluster[data_wtt$group == 'Control'], na.rm = TRUE)


#Sans division C

fc_c = weighted.mean(x = data_wtt_c$prop_fill[data_wtt_c$group == 'Control'], w = data_wtt_c$prop_cluster[data_wtt_c$group == 'Control'])

vc_c = weighted.mean(x = data_wtt_c$prop_visit[data_wtt_c$group == 'Control'], w = data_wtt_c$prop_cluster[data_wtt_c$group == 'Control'])

vfc_c = weighted.mean(x = data_wtt_c$prop_visit_fill[data_wtt_c$group == 'Control'], w = data_wtt_c$prop_cluster[data_wtt_c$group == 'Control'], na.rm = TRUE)

```

Groupe Info
```{r, eval = TRUE, message = FALSE, warning =  FALSE}

vi = weighted.mean(x = data_wtt$prop_visit[data_wtt$group == 'Info'], w = data_wtt$prop_cluster[data_wtt$group == 'Info'])

fi = weighted.mean(x = data_wtt$prop_fill[data_wtt$group == 'Info'], w = data_wtt$prop_cluster[data_wtt$group == 'Info'])

vfi = weighted.mean(x = data_wtt$prop_visit_fill[data_wtt$group == 'Info'], w = data_wtt$prop_cluster[data_wtt$group == 'Info'], na.rm = TRUE)
  
#Sans division C

vi_c= weighted.mean(x = data_wtt_c$prop_visit[data_wtt_c$group == 'Info'], w = data_wtt_c$prop_cluster[data_wtt_c$group == 'Info'])

fi_c =weighted.mean(x = data_wtt_c$prop_fill[data_wtt_c$group == 'Info'], w = data_wtt_c$prop_cluster[data_wtt_c$group == 'Info'])

vfi_c = weighted.mean(x = data_wtt_c$prop_visit_fill[data_wtt_c$group == 'Info'], w = data_wtt_c$prop_cluster[data_wtt_c$group == 'Info'], na.rm = TRUE)
  
```

Groupe Exp

```{r, eval = TRUE, message = FALSE, warning =  FALSE}

ve = weighted.mean(x = data_wtt$prop_visit[data_wtt$group == 'Exp'], w = data_wtt$prop_cluster[data_wtt$group == 'Exp'])

fe = weighted.mean(x = data_wtt$prop_fill[data_wtt$group == 'Exp'], w = data_wtt$prop_cluster[data_wtt$group == 'Exp'])

vfe = weighted.mean(x = data_wtt$prop_visit_fill[data_wtt$group == 'Exp'], w = data_wtt$prop_cluster[data_wtt$group == 'Exp'], na.rm = TRUE)
  
#Sans la division c

ve_c = weighted.mean(x = data_wtt_c$prop_visit[data_wtt_c$group == 'Exp'], w = data_wtt_c$prop_cluster[data_wtt_c$group == 'Exp'])

fe_c = weighted.mean(x = data_wtt_c$prop_fill[data_wtt_c$group == 'Exp'], w = data_wtt_c$prop_cluster[data_wtt_c$group == 'Exp'])

vfe_c = weighted.mean(x = data_wtt_c$prop_visit_fill[data_wtt_c$group == 'Exp'], w = data_wtt_c$prop_cluster[data_wtt_c$group == 'Exp'], na.rm = TRUE)
```

Groupe ExpInfo

```{r, eval = TRUE, message = FALSE, warning =  FALSE}

vei = weighted.mean(x = data_wtt$prop_visit[data_wtt$group == 'ExpInfo'], w = data_wtt$prop_cluster[data_wtt$group == 'ExpInfo'])

fei = weighted.mean(x = data_wtt$prop_fill[data_wtt$group == 'ExpInfo'], w = data_wtt$prop_cluster[data_wtt$group == 'ExpInfo'])

vfei = weighted.mean(x = data_wtt$prop_visit_fill[data_wtt$group == 'ExpInfo'], w = data_wtt$prop_cluster[data_wtt$group == 'ExpInfo'], na.rm = TRUE)

#Sans la division C

vei_c = weighted.mean(x = data_wtt_c$prop_visit[data_wtt_c$group == 'ExpInfo'], w = data_wtt_c$prop_cluster[data_wtt_c$group == 'ExpInfo'])

fei_c = weighted.mean(x = data_wtt_c$prop_fill[data_wtt_c$group == 'ExpInfo'], w = data_wtt_c$prop_cluster[data_wtt_c$group == 'ExpInfo'])

vfei_c = weighted.mean(x = data_wtt_c$prop_visit_fill[data_wtt_c$group == 'ExpInfo'], w = data_wtt_c$prop_cluster[data_wtt_c$group == 'ExpInfo'], na.rm = TRUE)



```
  
```{r, eval = TRUE, message = FALSE, warning =  FALSE, fig.width=8, fig.height=5} 

dataggv <-data.frame(group = c('Control',"Info","Exp","ExpInfo"), visit_moyenne = c(vc,vi,ve,vei)*100 ,visit_moyenne_c = c(vc_c,vi_c,ve_c,vei_c)*100)

dataggf <-data.frame(group = c('Control',"Info","Exp","ExpInfo"), fill_moyenne = c(fc,fi,fe,fei)*100 ,fill_moyenne_c = c(fc_c,fi_c,fe_c,fei_c)*100)

dataggvf <-data.frame(group = c('Control',"Info","Exp","ExpInfo"), vf_moyenne = c(vfc,vfi,vfe,vfei)*100 ,vf_moyenne_c = c(vfc_c,vfi_c,vfe_c,vfei_c)*100)


ggv = ggplot(dataggv, aes(x = group, y = visit_moyenne_c)) +
geom_segment(aes(x = group, xend = group, y = 0, yend = visit_moyenne_c), colour = "gray60") +
geom_point(size = 4, colour = "deepskyblue3") +
ylim(0,40) +
ggtitle("Proportion of Visits by Treatment Arm") +
xlab("Treatment Arm") + ylab("Proportion (%)") +
theme_minimal()


ggf = ggplot(dataggf, aes(x = group, y = fill_moyenne_c)) +
geom_segment(aes(x = group, xend = group, y = 0, yend = fill_moyenne_c), colour = "gray60") +
geom_point(size = 4, colour = "deepskyblue3") +
ylim(0,40) +
ggtitle("Proportion of Fill by Treatment Arm") +
xlab("Treatment Arm") + ylab("Proportion (%)") +
theme_minimal()


ggvf = ggplot(dataggvf, aes(x = group, y = vf_moyenne_c)) +
geom_segment(aes(x = group, xend = group, y = 0, yend = vf_moyenne_c), colour = "gray60") +
geom_point(size = 4, colour = "deepskyblue3") +
ylim(0,80) +
ggtitle("Proportion of Visit_Fill by Treatment Arm") +
xlab("Treatment Arm") + ylab("Proportion (%)") +
theme_minimal()


plot_grid(ggv, ggf, ggvf)

```



# Analyse par régression linéaire

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
# chargement des packages
library(tidyverse) # manipulation et visualisation des données
library(haven) # chargement données au format stata
library(knitr) # pour créer des tables
library(kableExtra) # pour faire des tables esthétiques
```

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
# ouverture des données
data <-
  read_csv(
    "/Users/martinbeaufils/Downloads/phishing_dataset.csv"
  ) %>%
  # recodage de la variable de traitement
  mutate(group = case_when(
    group == 1 ~ "Control",
    group == 2 ~ "Info",
    group == 3 ~ "Exp",
    group == 4 ~ "ExpInfo"
  )) %>%
  mutate(group = fct_relevel(group, "Control", "Info", "Exp", "ExpInfo")) %>%
  # recodage de la variable âge
  mutate(
    age_categories = case_when(
      age <= 25 ~ "16-25",
      age >= 26 & age <= 35 ~ "26-35",
      age >= 36 & age <= 45 ~ "36-45",
      age >= 46 & age <= 55 ~ "46-55",
      age > 55 ~ ">55"
    )
  ) %>%
  mutate(age_categories = fct_relevel(age_categories, "16-25", "26-35", "36-45", "46-55")) %>%
  # changement ordre variable division avec b pour référence
  mutate(division = fct_relevel(division, "B", "A", "C", "D", "E"))
```


```{r, eval = TRUE, message = FALSE, warning =  FALSE}
# on nest les données par outcome
data_regression <- data %>%
  pivot_longer(cols = c(visit, fill, visit_fill), names_to = "outcome", values_to = "value") %>%
  group_by(outcome) %>%
  nest()

# on affiche la table
data_regression
```

2. On crée une fonction pour faire une régression :

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
# on fait une régression
function_regression <- function(data){
  data %>%
  lm(value ~ group + gender + as.factor(int_employee) + age_categories + division, data = .) %>%
  broom::tidy(., conf.int = TRUE) %>%
  filter(term %in% c("groupExp", "groupExpInfo", "groupInfo")) %>%
  select(term, estimate, conf.low, conf.high) %>%
  mutate_at(vars(-term), ~ round(.*100, 1))
}
```

3. On applique la fonction à l'aide de la commande `map()` :

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
# on fait tourner les régressions
data_regression <- data_regression %>%
  mutate(regression_output = map(data, ~ function_regression(.)))

# on affiche la table
data_regression
```

4. Il faut maintenant afficher les résultats. Il faut "unnest" le tableau de données :

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
# on unnest les résultats
data_regression <- data_regression %>%
  select(-data) %>%
  unnest(regression_output)

# on affiche la table
data_regression
```

5. On peut tracer les intervalles de confiance à 95% :

```{r, eval = TRUE, message = FALSE, warning =  FALSE, fig.width=8, fig.height=5} 
# make the graph
data_regression %>%
  mutate(term = fct_relevel(term, "groupInfo", "groupExp", "groupExpInfo")) %>%
  mutate(outcome = case_when(outcome == "visit" ~ "Visit", outcome == "fill" ~ "Fill", outcome == "visit_fill" ~ "Visit fill")) %>%
  ggplot(.,
         aes(
           x = term,
           y = estimate,
           ymin = conf.low,
           ymax = conf.high
         )) +
  geom_hline(
    yintercept = 0,
    color = "orange",
    lwd = 0.3
  ) +
  geom_pointrange(
    size = 0.8,
    fatten = 2,
    colour = "deepskyblue3"
  ) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
  coord_flip() +
  facet_wrap(~ outcome) +
  ylab("Average Marginal Effects") + xlab("") +
  theme_minimal()
```


On teste maintenant la robustesse des résultats, pour cela on reproduit les mêmes régressions que précédement mais sans les variables de contrôle.

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
# on nest les données par outcome
data_regression2 <- data %>%
  pivot_longer(cols = c(visit, fill, visit_fill), names_to = "outcome", values_to = "value") %>%
  group_by(outcome) %>%
  nest()

# on affiche la table
data_regression2
```

2. On crée une deuxième fonction pour faire une régression (sans les variables de contrôle) :

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
# on fait une régression
function_regression2 <- function(data){
  data %>%
  lm(value ~ group, data = .) %>%
  broom::tidy(., conf.int = TRUE) %>%
  filter(term %in% c("groupExp", "groupExpInfo", "groupInfo")) %>%
  select(term, estimate, conf.low, conf.high) %>%
  mutate_at(vars(-term), ~ round(.*100, 1))
}
```

3. On applique la fonction à l'aide de la commande `map()` :

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
# on fait tourner les régressions
data_regression2 <- data_regression2 %>%
  mutate(regression_output = map(data, ~ function_regression2(.)))

# on affiche la table
data_regression2
```

4. Il faut maintenant afficher les résultats. Il faut "unnest" le tableau de données :

```{r, eval = TRUE, message = FALSE, warning =  FALSE}
# on unnest les résultats
data_regression2 <- data_regression2 %>%
  select(-data) %>%
  unnest(regression_output)

# on affiche la table
data_regression2
```

5. On peut tracer les intervalles de confiance à 95% :

```{r, eval = TRUE, message = FALSE, warning =  FALSE, fig.width=8, fig.height=5} 
# make the graph
data_regression2 %>%
  mutate(term = fct_relevel(term, "groupInfo", "groupExp", "groupExpInfo")) %>%
  mutate(outcome = case_when(outcome == "visit" ~ "Visit", outcome == "fill" ~ "Fill", outcome == "visit_fill" ~ "Visit fill")) %>%
  ggplot(.,
         aes(
           x = term,
           y = estimate,
           ymin = conf.low,
           ymax = conf.high
         )) +
  geom_hline(
    yintercept = 0,
    color = "orange",
    lwd = 0.3
  ) +
  geom_pointrange(
    size = 0.8,
    fatten = 2,
    colour = "deepskyblue3"
  ) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
  coord_flip() +
  facet_wrap(~ outcome) +
  ylab("Average Marginal Effects") + xlab("") +
  theme_minimal()
```

